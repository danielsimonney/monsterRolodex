{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.js","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","console","log","monsters","map","key","SearchBox","placeholder","handleChange","filter","value","type","onChange","App","e","setState","searchEmail","target","searchField","state","fetch","then","response","json","users","this","filteredMonsters","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAEaA,G,MAAM,SAAAC,GAAK,OACpB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,4BACKL,EAAMI,QAAQE,MAEnB,2BACKN,EAAMI,QAAQG,UCLdC,G,MAAU,SAAAR,GAEnB,OADAS,QAAQC,IAAIV,GACL,yBAAKC,UAAU,aAElBD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACpB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,UCNjCU,G,MAAW,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,YAAYC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,MACvD,OACA,2BAAOjB,UAAU,SACjBkB,KAAK,SACLD,MAAOA,EACPb,GAAIY,EACJF,YAAaA,EACbK,SAAUJ,M,4cC+CCK,E,wCApDb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAeRgB,aAAa,SAACM,GACZ,EAAKC,SAAS,CAAEC,YAA6B,UAAhBF,EAAEG,OAAOpB,GAAiBiB,EAAEG,OAAOP,MAAQ,KACxE,EAAKK,SAAS,CAAEG,YAA6B,SAAhBJ,EAAEG,OAAOpB,GAAgBiB,EAAEG,OAAOP,MAAQ,MAhBvE,EAAKS,MAAQ,CACXhB,SAAS,GACTe,YAAY,GACZF,YAAY,IALG,E,gEAUE,IAAD,OAClBI,MAAM,8CACCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAAEZ,SAASqB,S,+BAQrC,IAAD,EACmCC,KAAKN,MAAxChB,EADA,EACAA,SAASe,EADT,EACSA,YAAYF,EADrB,EACqBA,YAC5Bf,QAAQC,IAAIc,GACZ,IAAMU,EAAiBvB,EAASM,QAAO,SAAAb,GAAO,OAC5CA,EAAQE,KAAK6B,cAAcC,SAASV,EAAYS,gBAChD/B,EAAQG,MAAM4B,cAAcC,SAASZ,EAAYW,kBAOrD,OALID,EAAiBjB,QAAO,SAAAb,GAAO,OAC7BA,EAAQE,KAAK6B,cAAcC,SAASZ,EAAYW,kBAElD1B,QAAQC,IAAIwB,GAGd,yBAAKjC,UAAU,OACb,gDACA,kBAAC,EAAD,CACAiB,MAAOe,KAAKN,MAAMD,YAClBT,OAAO,OACPF,YAAY,kBACZC,aAAciB,KAAKjB,eACnB,kBAAC,EAAD,CACAC,OAAO,QACPC,MAAOe,KAAKN,MAAMH,YAClBT,YAAY,2BACZC,aAAciB,KAAKjB,eACnB,kBAAC,EAAD,CAAUL,SAAUuB,S,GA/CRG,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.d6d4f690.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport './card.css'\nexport const Card= props => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n        <h2>\n            {props.monster.name}\n        </h2>\n        <p>\n            {props.monster.email}\n        </p>\n    </div>\n)","import React, {Component} from \"react\";\nimport {Card} from '../card/card'\nimport './card-list.css'\n\nexport const Cardlist= props => {\n    console.log(props)\n    return <div className=\"card-list\">\n          {\n        props.monsters.map(monster =>\n             (<Card key={monster.id} monster={monster}/>))\n      }\n    </div>\n}","import React, {Component} from \"react\";\nimport './search-box.css'\n\nexport const SearchBox= ({ placeholder,handleChange,filter,value}) => {\n    return(       \n    <input className='search' \n    type=\"search\"\n    value={value}\n    id={filter} \n    placeholder={placeholder}\n    onChange={handleChange}/>\n)\n}","import React, {Component} from \"react\";\nimport {Cardlist} from './components/card-list/card-list'\nimport {SearchBox} from './components/search-box/search-box'\nimport './App.css'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      monsters:[],\n      searchField:'',\n      searchEmail:'',\n     }\n    //  Si on veut pas utiliser d'arrows fonctions mais de fonctions normals , pour remettre le scope à une fonction on peut faire comme ca , le bind permet de passer le contexte à la fonction\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response => response.json())\n          .then(users=> this.setState({ monsters:users}))\n  }\n\n  handleChange=(e)=>{\n    this.setState({ searchEmail: e.target.id === 'email' ? e.target.value : ''})\n    this.setState({ searchField: e.target.id === 'name' ? e.target.value : ''})\n  }\n\n  render() {\n    const {monsters,searchField,searchEmail }=this.state\n    console.log(searchEmail)\n    const filteredMonsters=monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()) &&\n      monster.email.toLowerCase().includes(searchEmail.toLowerCase())\n      )\n      filteredMonsters.filter(monster => \n        monster.name.toLowerCase().includes(searchEmail.toLowerCase())\n        )\n      console.log(filteredMonsters)\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters rolodex</h1>\n      <SearchBox\n      value={this.state.searchField}\n      filter=\"name\"\n      placeholder=\"search monsters\"\n      handleChange={this.handleChange} />\n      <SearchBox\n      filter=\"email\"\n      value={this.state.searchEmail}\n      placeholder=\"search monsters by email\"\n      handleChange={this.handleChange} />\n      <Cardlist monsters={filteredMonsters} />\n    </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}